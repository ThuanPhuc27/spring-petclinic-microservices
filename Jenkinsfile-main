pipeline {
    agent { label 'pet' }
    environment {
        SERVICES = getServices()
        REGISTRY_URL = "docker.io"
        DOCKER_IMAGE_BASENAME = "runandgo"
    }

    stages {
        stage('Checkout source') {
            steps {
                checkout scm

                script {
                    try {
                        def tag = sh(script: "git describe --tags --exact-match HEAD || true", returnStdout: true).trim()
                        if (tag) {
                            env.GIT_TAG = tag
                            echo "Found Tag: ${env.GIT_TAG}"
                        } else {
                            env.GIT_TAG = "dev"
                        }

                    } catch (Exception e) {
                        error("Failed to determine tag : ${e.getMessage()}")
                    }
                }
            }
        }


        stage('Detect Changes') {
            steps {
                script {
                    env.SERVICES = getServices()
                    if (env.SERVICES == "NONE") {
                        echo "No relevant changes detected. Skipping build."
                        error("No relevant changes detected")
                    } else {
                        echo "Detected changes in services: ${env.SERVICES}"
                    }
                }
            }
        }

        stage('Build Services') {
            when {
                expression { env.SERVICES.trim() }
            }
            steps {
                script {
                    def services = env.SERVICES.split(',')
                    def parallelBuilds = [:]

                    services.each { service ->
                        parallelBuilds[service] = {
                            stage("Build: ${service}") {
                                try {
                                    echo "üöÄ Building: ${service}"
                                    sh "mvn clean package -pl ${service} -DfinalName=app -DskipTests"
                                    
                                    def jarfile = "${service}/target/app.jar"
                                    archiveArtifacts artifacts: jarfile, fingerprint: true
                                } catch (Exception e) {
                                    echo "‚ùå Build failed for ${service}: ${e.getMessage()}"
                                    error("Build failed for ${service}")
                                }
                            }
                        }
                    }

                    parallel parallelBuilds
                }
            }
        }


        stage('Build Docker Image') {
            when {
                expression { env.SERVICES.trim() && env.GIT_TAG }
            }
            steps {
                script {
                    def services = env.SERVICES.split(',')
                    def parallelDockerBuilds = [:]

                    services.each { service ->
                        parallelDockerBuilds[service] = {
                            stage("Docker Build: ${service}") {
                                try {
                                    echo "üê≥ Building Docker Image for: ${service}"
                                    sh "docker build --build-arg ARTIFACT_NAME=${service}/target/app -t ${DOCKER_IMAGE_BASENAME}/${service}:${env.GIT_TAG} -f docker/Dockerfile ."
                                } catch (Exception e) {
                                    echo "‚ùå Docker Build failed for ${service}: ${e.getMessage()}"
                                    error("Docker Build failed for ${service}")
                                }
                            }
                        }
                    }

                    parallel parallelDockerBuilds
                }
            }
        }

        stage('Login to Docker Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo $DOCKER_PASS | docker login ${REGISTRY_URL} -u $DOCKER_USER --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            when {
                expression { env.SERVICES.trim() && env.GIT_TAG }
            }
            steps {
                script {
                    def services = env.SERVICES.split(',')
                    def parallelDockerPush = [:]

                    services.each { service ->
                        parallelDockerPush[service] = {
                            stage("Docker Push: ${service}") {
                                try {
                                    echo "üê≥ Push Docker Image for: ${service}"
                                    sh "docker push ${DOCKER_IMAGE_BASENAME}/${service}:${env.GIT_TAG}"
                                } catch (Exception e) {
                                    echo "‚ùå Docker Push failed for ${service}: ${e.getMessage()}"
                                    error("Docker Push failed for ${service}")
                                }
                            }
                        }
                    }

                    parallel parallelDockerPush 
                }
            }
        }

        stage('Checkout Manifest Repo') {
            when {
                expression { env.GIT_TAG != "dev"}
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'petclinic_github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    script {
                        sh "rm -rf Petclinic_HelmChart"
                        def repoDir = 'Petclinic_HelmChart'
                        if (!fileExists(repoDir)) {
                            sh """
                                git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/ThuanPhuc27/Petclinic_HelmChart.git
                            """
                        }
                    }
                }
            }
        }

        stage('Redeploy') {
            when {
                expression { env.SERVICES.trim() && env.GIT_TAG }
            }
            steps {
                script {
                    def services = env.SERVICES.split(',')
                    def parallelRedeploy = [:]
                    services.each { service ->
                        parallelRedeploy[service] = {
                            stage("Redeploy service: ${service}") {
                                try {
                                    if(env.GIT_TAG =="dev"){
                                        echo "üê≥ Redeploy service: ${service}"
                                        def appName = service.replaceFirst(/^spring-/, '')
                                        def deploymentName = "${appName}-deployment"
                                        echo "${deploymentName}"
                                        sh "kubectl rollout restart deployment ${deploymentName} -n petclinic-dev"
                                    }
                                    else { 
                                        dir('Petclinic_HelmChart') {               
                                            echo "Updating ${service} from branch: main"
                                            sh """
                                                echo ${service.drop(17)}
                                                sed -i 's|tag:.*|tag: ${GIT_TAG}|' charts/${service.drop(17)}/values.yaml
                                            """
                                        }
                                    }
                                } catch (Exception e) {
                                    echo "‚ùå Redeploy service failed for ${service}: ${e.getMessage()}"
                                    error("Redeploy service failed for ${service}")
                                }
                            }
                        }
                    }
                    parallel parallelRedeploy 

                    if (env.GIT_TAG != "dev") {
                        dir('Petclinic_HelmChart') {
                            sh """
                            git remote set-url origin https://github.com/ThuanPhuc27/Petclinic_HelmChart.git
                            git config user.name "jenkins-bot"
                            git config user.email "jenkins-bot@lptdevops.com"
    
                            git add .
                            git commit -m 'update services tag'
                            git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/ThuanPhuc27/Petclinic_HelmChart.git main
                            """
                        }
                    }    
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh "docker logout ${REGISTRY_URL}"
        }
        success {
            publishChecks(
                name: 'PipelineResult',
                title: 'Code Coverage Check Success',
                status: 'COMPLETED',
                conclusion: 'SUCCESS',
                summary: 'Pipeline completed successfully.',
                detailsURL: env.BUILD_URL
            )
            slackSend channel: '#ci-alert', 
                color: 'good',
                message: "‚úÖ SUCCESS: Job ${env.JOB_NAME} \n üìå Branch:  ${env.GIT_BRANCH.replace('origin/', '')} \n üîç Commit:  ${env.GIT_COMMIT.take(8)}  \n ‚è±Ô∏è Time: ${currentBuild.durationString}"
        }

        failure {
            publishChecks(
                name: 'PipelineResult',
                title: 'Code Coverage Check Fail',
                status: 'COMPLETED',
                conclusion: 'FAILURE', 
                summary: 'Pipeline failed. Check logs for details.',
                detailsURL: env.BUILD_URL
            )
            slackSend channel: '#ci-alert', 
                color: 'danger', 
                message: "‚ùå FAILED: Job ${env.JOB_NAME}  \n üìå Branch:  ${env.GIT_BRANCH.replace('origin/', '')} \n üîç Commit:  ${env.GIT_COMMIT.take(8)}  \n ‚è±Ô∏è Time: ${currentBuild.durationString}"
        }
    }
}

def getServices() {
    def changedFiles = sh(script: "git diff --name-only origin/main~1 origin/main", returnStdout: true).trim().split("\n")

    def services = [
        'spring-petclinic-customers-service', 
        'spring-petclinic-vets-service',
        'spring-petclinic-visits-service',
        'spring-petclinic-admin-server', 
        'spring-petclinic-config-server',
        'spring-petclinic-discovery-server',
        'spring-petclinic-genai-service',
        'spring-petclinic-api-gateway',
    ]
    def affectedServices = services.findAll { service ->
        changedFiles.any { file -> file.startsWith(service + "/") }
    }

    if (affectedServices.isEmpty()) {
        return "NONE"
    }
    echo "Changed services: ${affectedServices.join(', ')}"
    return affectedServices.join(',')
}